declare "local" {
	argument "enable_collectors" {
		comment  = "A list(string) of collectors to enable (default: see below)"
		optional = true
	}

	argument "disable_collectors" {
		comment  = "A list(string) of collectors to disable (default: see below)"
		optional = true
	}

	argument "namespace_label" {
		comment  = "The namespace label to add for all metrics (default: node)"
		optional = true
	}

	prometheus.exporter.unix "local" {
		include_exporter_metrics = true
		enable_collectors        = coalesce(argument.enable_collectors.value, ["logind", "mountstats", "processes", "systemd", "tcpstat"])
		disable_collectors       = coalesce(argument.disable_collectors.value, ["mdadm"])
	}

	discovery.relabel "local" {
		targets = prometheus.exporter.unix.local.targets

		rule {
			action       = "replace"
			replacement  = coalesce(argument.namespace_label.value, "node")
			target_label = "namespace"
		}
	}

	export "output" {
		value = discovery.relabel.local.output
	}
}

declare "scrape" {
	argument "targets" {
		comment = "A list(map(string)) of targets to scrape (required)"
	}

	argument "forward_to" {
		comment = "A list(MetricsReceiver) of where collected metrics should be forwarded to (required)"
	}

	argument "job_label" {
		comment  = "The job label to add for all metrics (default: integrations/node_exporter)"
		optional = true
	}

	argument "keep_metrics" {
		comment  = "A regular expression of metrics to keep (default: see below)"
		optional = true
	}

	argument "drop_metrics" {
		comment  = "A regular expression of metrics to drop (default: see below)"
		optional = true
	}

	argument "scrape_interval" {
		comment  = "How often to scrape metrics from the targets (default: 60s)"
		optional = true
	}

	argument "scrape_timeout" {
		comment  = "How long before a scrape times out (default: 10s)"
		optional = true
	}

	prometheus.scrape "unix" {
		forward_to      = [prometheus.relabel.unix.receiver]
		targets         = argument.targets.value
		scrape_interval = coalesce(argument.scrape_interval.value, "60s")
		scrape_timeout  = coalesce(argument.scrape_timeout.value, "10s")
	}

	prometheus.relabel "unix" {
		forward_to = argument.forward_to.value

		// Drop metrics that match the drop_metrics regex
		rule {
			action        = "drop"
			regex         = coalesce(argument.drop_metrics.value, "(^(go)_.+$)")
			source_labels = ["__name__"]
		}

		// Keep only metrics that match the keep_metrics regex
		rule {
			action        = "keep"
			regex         = coalesce(argument.keep_metrics.value, "(.*)")
			source_labels = ["__name__"]
		}

		// Drop metrics for certain file systems
		rule {
			action        = "drop"
			regex         = "node_filesystem.*@(tmpfs)"
			separator     = "@"
			source_labels = ["__name__", "fstype"]
		}

		// Change job label for all metrics
		rule {
			action       = "replace"
			replacement  = coalesce(argument.job_label.value, "integrations/node_exporter")
			target_label = "job"
		}
	}
}
