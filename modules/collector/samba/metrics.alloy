declare "local" {
  argument "port" {
    comment  = "The port to scrape metrics from (default: 9922)"
    optional = true
  }

  argument "namespace_label" {
    comment  = "The namespace label to add for all metrics (default: node)"
    optional = true
  }

  argument "job_label" {
    comment  = "The job label to add for all metrics (default: node/samba_exporter)"
    optional = true
  }

  discovery.relabel "local" {
    targets = [
      {
        "__address__" = "localhost:" + coalesce(argument.port.value, "9922"),
        "namespace" = coalesce(argument.namespace_label.value, "node"),
        "job" = coalesce(argument.job_label.value, "node/samba_exporter"),
        "source" = "local",
      },
    ]
  }
}

declare "scrape" {
  argument "targets" {
    comment = "A list(map(string)) of targets to scrape (required)"
  }

  argument "forward_to" {
    comment = "A list(MetricsReceiver) of where collected metrics should be forwarded to (required)"
  }

  argument "keep_metrics" {
    comment  = "A regular expression of metrics to keep (default: see below)"
    optional = true
  }

  argument "drop_metrics" {
    comment  = "A regular expression of metrics to drop (default: see below)"
    optional = true
  }

  argument "scrape_interval" {
    comment  = "How often to scrape metrics from the targets (default: 60s)"
    optional = true
  }

  argument "scrape_timeout" {
    comment  = "How long before a scrape times out (default: 10s)"
    optional = true
  }

  prometheus.scrape "samba" {
    forward_to      = [prometheus.relabel.samba.receiver]
    targets         = argument.targets.value
    scrape_interval = coalesce(argument.scrape_interval.value, "60s")
    scrape_timeout  = coalesce(argument.scrape_timeout.value, "10s")
  }

  prometheus.relabel "samba" {
    forward_to = argument.forward_to.value

    // Drop metrics that match the drop_metrics regex
    rule {
      action        = "drop"
      regex         = coalesce(argument.drop_metrics.value, "")
      source_labels = ["__name__"]
    }

    // Keep only metrics that match the keep_metrics regex
    rule {
      action        = "keep"
      regex         = coalesce(argument.keep_metrics.value, "(.+)")
      source_labels = ["__name__"]
    }
  }
}
